[gd_scene load_steps=9 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]
[ext_resource path="res://Polygon2D.gd" type="Script" id=2]
[ext_resource path="res://grid.png" type="Texture" id=3]
[ext_resource path="res://TubeEl.gd" type="Script" id=4]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float level = 0.0;

void vertex() {
	VERTEX.x = VERTEX.x;
	
}

void fragment() {
    vec2 distor = vec2(UV.x * abs(sin(TIME)),UV.y * abs(cos(TIME)) );
	// vec2 distor = vec2(sqrt(UV.x * UV.y) * 2.0 * 	abs(sin(1)), UV.y);
	// vec2 distor = UV;
	vec4 col = texture(TEXTURE, distor);
    
	//COLOR = col;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/level = 0.0

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform float widthU       = 1.0;
uniform float widthD       = 1.0;
uniform float medianHeight = 1.0;
uniform float downOffset   = 1.0;
uniform float downAngle    = 0.0;

uniform sampler2D inputTexture;

varying vec2 vert;

void vertex() {
	vert = VERTEX;
}


void fragment() {
	
	float height          = medianHeight;
	float medianOffset 	  = widthU / 2.0;
	float xDifference  	  = widthU - widthD;
	// float widthRatio  	  = widthD / widthU;
	
	
	float xRotateRatio    = cos(downAngle);
	
	
	float widthRatio  	  = widthD / (xRotateRatio * widthU);
	float xRotateOffset   = (1.0 - xRotateRatio) * widthU / 2.0;
	float vertaaa  = 1.0;// vert.y / (medianHeight);
	float xTargetOffset   = 1.0 * downOffset * vert.y / height; 
	
	float downOffsetRatio = height / (xDifference / 2.0);
	float xOffsetScale	  = (vert.x + medianOffset - vert.y / downOffsetRatio - xTargetOffset - xRotateOffset) / widthD;
	float xFactor      	  = height / (height - vert.y * (xDifference / widthU));
	
	float xx 		   	  = xOffsetScale * widthRatio * xFactor;

	//float yRotateRatio    = sin(downAngle) * vert.y / ((vert.x + medianOffset - vert.y / downOffsetRatio ));
	float yRotateRatio    = (1.0 + sin(downAngle)) * vert.y / (medianHeight);
	float yRotateRatio2    = sin(downAngle) * vert.y / (medianHeight);
	
    vec4 col = vec4(0.0, yRotateRatio, 0.0, 1.0);
	//COLOR = col;
	COLOR = texture(inputTexture, vec2(xx, yRotateRatio));	
	
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/widthU = 30
shader_param/widthD = 30
shader_param/medianHeight = 30.0
shader_param/downOffset = 0.0
shader_param/downAngle = 0.785398
shader_param/inputTexture = ExtResource( 3 )

[node name="Root" type="Node2D"]

[node name="Node2D" type="Node2D" parent="."]
editor/display_folded = true
visible = false

[node name="Sprite" type="Sprite" parent="Node2D"]
visible = false
material = SubResource( 2 )
position = Vector2( 296, 296 )
texture = ExtResource( 1 )

[node name="Node2D" type="Node2D" parent="Node2D"]
editor/display_folded = true
visible = false

[node name="testbone" type="Polygon2D" parent="Node2D/Node2D"]
texture = ExtResource( 1 )
skeleton = NodePath("../Skeleton2D")
polygon = PoolVector2Array( 0, 0, 100, 0, 100, 100, 0, 100 )
uv = PoolVector2Array( 0, 0, 64, 0, 64, 64, 0, 64 )

[node name="Skeleton2D" type="Skeleton2D" parent="Node2D/Node2D"]

[node name="Bone2D" type="Bone2D" parent="Node2D/Node2D/Skeleton2D"]
position = Vector2( 50, 0 )
rotation = 1.5708
rest = Transform2D( -4.37114e-008, 1, -1, -4.37114e-008, 50, 0 )
default_length = 100.0

[node name="Polygon2D" type="Polygon2D" parent="Node2D"]
visible = false
position = Vector2( -8, 12 )
texture = ExtResource( 1 )
polygon = PoolVector2Array( 0, 0, 50, 0, 100, 0, 75, 100, 50, 100, 25, 100 )
uv = PoolVector2Array( 0, 0, 32, 0, 64, 0, 65, 64, 32, 64, 0, 64 )
script = ExtResource( 2 )

[node name="TubeEl" type="Polygon2D" parent="."]
material = SubResource( 4 )
texture = ExtResource( 3 )
polygon = PoolVector2Array( -15, 0, 15, 0, 10.6066, 40.6066, -10.6066, 19.3934 )
uv = PoolVector2Array( 0, 0, 580, 0, 580, 580, 0, 580 )
script = ExtResource( 4 )
end = Vector2( 0, 30 )
startWidth = 30
endWidth = 30
endAngle = 45
inputTexture = ExtResource( 3 )
